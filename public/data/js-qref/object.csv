es;pf;scope;cat;syntax;foo;href;txt
1;;c;;new Object([value]) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object;
X;;i;p;obj.__proto__;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto;
1;;i;p;obj.constructor ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor;a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name. The value is only read-only for primitive values such as 1, true and "test".
6;•;c;f;Object.assign(target, ...sources) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign;copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.
5;•;c;f;Object.create(proto[, propertiesObject]) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create;creates a new object with the specified prototype object and properties.
5;•;c;f;Object.defineProperties(obj, props) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties;defines new or modifies existing properties directly on an object, returning the object.
5;;c;f;Object.defineProperty(obj, prop, descriptor) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty;defines a new property directly on an object, or modifies an existing property on an object, and returns the object.
7;•;c;f;Object.entries(obj) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries;returns an array of a given object's own enumerable property [key, value] pairs, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).
5;;c;f;Object.freeze(obj) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze;freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. The method returns the object being frozen.
X;;c;f;Object.getNotifier(obj) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getNotifier;
5;;c;f;Object.getOwnPropertyDescriptor(obj, prop) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor;returns a property descriptor for an own property (that is, one directly present on an object and not in the object's prototype chain) of a given object.
7;•;c;f;Object.getOwnPropertyDescriptors(obj) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors;returns all own property descriptors of a given object.
5;;c;f;Object.getOwnPropertyNames(obj) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames;returns an array of all properties (enumerable or not) found directly upon a given object.
6;;c;f;Object.getOwnPropertySymbols(obj) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols;returns an array of all symbol properties found directly upon a given object.
5;;c;f;Object.getPrototypeOf(obj) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf;returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object.
6;•;c;f;Object.is(value1, value2) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is;determines whether two values are the same value.
5;;c;f;Object.isExtensible(obj) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible;determines if an object is extensible (whether it can have new properties added to it).
5;;c;f;Object.isFrozen(obj) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen;determines if an object is frozen.
5;;c;f;Object.isSealed(obj) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed;determines if an object is sealed.
5;•;c;f;Object.keys(obj) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys;returns an array of a given object's own enumerable properties, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).
X;;c;f;Object.observe(obj, callback[, acceptList]) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe;
5;;c;f;Object.preventExtensions(obj) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions;prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).
1;;i;f;obj.hasOwnProperty(prop) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty;returns a boolean indicating whether the object has the specified property.
1;;i;f;obj.isPrototypeOf(object) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf;tests for an object in another object's prototype chain.
1;;i;f;obj.propertyIsEnumerable(prop) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable;returns a Boolean indicating whether the specified property is enumerable.
1;;i;f;obj.toLocaleString() ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString;returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.
1;;i;f;obj.toString() ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString;returns a string representing the object.
1;;i;f;obj.valueOf() ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf;returns the primitive value of the specified object.
5;;c;f;Object.seal(obj) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal;seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.
6;•;c;f;Object.setPrototypeOf(obj, prototype) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf;sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null.
X;;c;f;Object.unobserve(obj, callback) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/unobserve;
7;•;c;f;Object.values(obj) ;;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values;returns an array of a given object's own enumerable property values, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).